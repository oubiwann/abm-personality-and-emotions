;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Charge Support Procedures   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; REPL session experimentations ...
;;
;; Attracted agent ids:
;; show [who] of filter-attracted-agents turtle 0
;; [25 50 42 27 15]
;;
;; Inverse square distances for attracted agents:
;; show map [x -> ([distance turtle x] of turtle 0)^(-2)] [25 50 42 27 15]
;; [0.020353889040519827 0.14843710347794212 0.02092622987036597
;;  0.024669067047669954 0.018794516818911148]
;;
;; Sum of inverse square distances for attracted agents:
;; show sum map [x -> (x)^(-2)] [7.0093266363805755 2.5955462048442337
;;                               6.91280815046164 6.366835620085916
;;                               7.294313376966194]
;; 0.233180806255409
;;
;; Agent order is random whenever queried, so in order to get centers of charge,
;; for which we need distances and x/y coords, we need to do it all in one shot.
;;
;; (reduce [ [acc xy] -> (list (first acc + first xy) (item 1 acc + item 1 xy)) ]
;;         attracted-agent-coords turtle 2)
;;
;; let coords (attracted-agent-coords turtle 2)
;; (map [ x -> x / (length coords) ]
;;      (reduce [ [acc xy] -> (list (first acc + first xy) (item 1 acc + item 1 xy)) ]
;;                coords))
;;
;; center-of-charge (agent-augmented-coords-with-k turtle 0 (filter-attracted-agents turtle 0))

to-report charge [dist]
    report (dist)^(-2)
end

to-report charge-with-k [dist]
    report (dist)^(-2) * force-multiplier
end

to-report summed-charge [distances]
  report sum (map [x -> (charge x)] distances)
end

to-report charge-magnitude [xs]
  ;; The magnitude of an attractive or repuslive "charge" is given by
  ;; the inverse square of the distance from the agent in question
end

to-report summed-coords [coords]
    report reduce [ [acc x-y-ch] -> (list (item 0 acc + item 0 x-y-ch)
                                          (item 1 acc + item 1 x-y-ch)) ]
                  coords
end

to-report summed-coords-with-k [augmented-coords]
    report reduce [ [acc x-y-ch] -> (list (item 0 acc + (item 0 x-y-ch * item 2 x-y-ch))
                                          (item 1 acc + (item 1 x-y-ch * item 2 x-y-ch))) ]
                  augmented-coords
end

to-report center-of-charge [coords]
  report map [ coord -> coord / (length coords) ]
             (summed-coords coords)
end

to-report center-of-charge-with-k [augmented-coords]
  ;; The "center of charge" is given by the x and y components of the nearby
  ;; personalities times their associated charge magnitudes, then divided by the
  ;; sums of their magnitudes. This is analogous to center of mass calcualtions
  ;; in two dimensions.
  ;;
  ;; Steps are as follows, for all agents:
  ;; 1) Get their distance from self; square it and invert it. This is the
  ;;    magnitude.
  ;; 2) Get each xcoord and multiply by magnitude, sum the results
  ;; 3) Sum the magnitudes and divide the results of the previous step by this
  ;; 4) Do steps 2 & 3 for ycoords; the combination of these two results
  ;;    represents the x,y coord of the "center of charge".
  let summed-ch sum map [ x-y-ch -> (item 2 x-y-ch) ] augmented-coords
  report map [ coord -> coord / summed-ch ]
             (summed-coords-with-k augmented-coords)
end

to-report sum-forces [xs ys]
  ;; This procedure does the following:
  ;; * gets the "center of charge" for attracting agents
  ;; * gets the "center of charge" for repulsing agents
  ;; * calculates their magnitude using the `charge-magnitude` function
  ;; * transforms the repulsing location by putting it on the other side
  ;;   of the agent and then treating it as attracting
  ;; * calculates the sum of the magnitudes
  ;; * calculates the sum of the vector components
  ;;
  ;; Once these steps are done, the direction can be converted to degrees so
  ;; that the agent can face that direction, and the magnitude can be used to
  ;; move the agent that many units in the direction it faces.
end
